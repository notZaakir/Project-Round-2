<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEBLAEsAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwg
        JC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAMgAyADASIAAhEBAxEB/8QA
        HAABAAEFAQEAAAAAAAAAAAAAAAgBAwQFBwIG/8QAShABAAIBAwEEBAkJBAkDBQAAAAECAwQFEQYSITFB
        B1FhcQgTFBgiQoGRsTJSVWJygpOhwRUjkrIkMzQ1Q0RzotEWJWNTg8Lh8P/EABQBAQAAAAAAAAAAAAAA
        AAAAAAD/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwCP4AAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AN30v0lvPWG6RoNn0ls144nJknux4q+u1vKP5z5cg0j6Lp/oXqbqiYnaNn1OfFM8fHTXsY4/ftxCRXRX
        oN6e6dpj1W7Vru+4xxMzlr/c0n9Wnn77c+6HUaY6Y6VpSsVpWOIrEcREewEa9r+Djv8AqKVtuW76HR8+
        NcVbZrR+EfzfSYfg17ZWv9/1FrLz/wDHp6V/GZdyAcOy/Br2q1f7nqHW0t674KWj+Uw+d3P4N+94K2tt
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAP/2Q==
</value>
  </data>
</root>